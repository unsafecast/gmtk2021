class t{constructor(t){this.clearColor="black",this.canvas=t,this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context=this.canvas.getContext("2d"),this.context.scale(2,2)}drawRect(t,s,e,i,a="white"){this.context.fillStyle=a,this.context.fillRect(t,s,e,i)}drawImg(t,s,e,i,a){this.context.drawImage(t,s,e,i,a)}clear(){this.context.fillStyle=this.clearColor,this.context.fillRect(0,0,this.canvas.width,this.canvas.height)}}class s{constructor(s){this.images=s,this.rend=new t(document.getElementById("main-canvas")),this.curScene=null,this.keysPressed={},window.addEventListener("keydown",(t=>{this.keysPressed[t.key]=!0})),window.addEventListener("keyup",(t=>{this.keysPressed[t.key]=!1}))}setScene(t){this.curScene=t}start(){window.requestAnimationFrame(this.tick.bind(this))}tick(){this.rend.clear(),this.curScene?.tick(),this.curScene?.draw(this.rend),window.requestAnimationFrame(this.tick.bind(this))}}class e extends class{constructor(t,s){this.x=0,this.y=0,this.w=32,this.h=32,this.canCollide=!1,this.image=s,this.state=t}tick(){}draw(t){t.drawImg(this.image,this.x,this.y,this.w,this.h)}collidesWith(t){const s=this.x,e=this.x+this.w,i=this.y,a=this.y+this.h,n=t.x,h=t.x+t.w,c=t.y,r=t.y+t.h;return s<h&&e>n&&i<r&&a>c}collided(t){}}{constructor(t,s){super(t,s),this.canCollide=!0}collided(t){this.x-=5,this.collidesWith(t)&&(this.x+=10),this.collidesWith(t)&&(this.x-=5,this.y-=5),this.collidesWith(t)&&(this.y+=10)}}class i extends e{constructor(t){super(t,t.images.localDuck),this.canMove=!0}tick(){super.tick(),this.state.keysPressed.a&&(this.x-=5),this.state.keysPressed.d&&(this.x+=5),this.state.keysPressed.w&&(this.y-=5),this.state.keysPressed.s&&(this.y+=5)}}const a=[["a","p","a","a","a","a","a","a","a","a","a","a","a"],["g","g","g","g","g","g","g","g","g","g","g","g","g"]];class n extends class{constructor(t,s=null){this.state=t,this.entities=new Map,this.background=s}addEntity(t,s){this.entities.set(t,s)}getEntity(t){return this.entities.get(t)}loadTilemap(t){t.forEach(((t,s)=>{t.forEach(((t,a)=>{let n=null,h="";switch(t){case"p":n=new i(this.state),h="player";break;case"g":n=new e(this.state,this.state.images.grass),h=`grass_${Math.random()}`}null!=n&&(n.x=32*a,n.y=32*s,this.addEntity(h,n))}))}))}tick(){for(const t of this.entities.entries()){t[1].tick();for(const s of this.entities.entries())s[0]!=t[0]&&t[1].canCollide&&s[1].canCollide&&t[1].collidesWith(s[1])&&(t[1].canMove&&t[1].collided(s[1]),s[1].canMove&&s[1].collided(t[1]))}}draw(t){null!=this.background&&t.drawImg(this.background,0,0,t.canvas.width,t.canvas.height);for(const s of this.entities.entries())s[1].draw(t)}}{constructor(t){super(t),this.loadTilemap(a)}tick(){super.tick()}draw(t){super.draw(t)}}((t,s)=>{let e=Object.keys(t).length,i=0,a={};for(const n in t){let h=new Image;h.onload=()=>{i+=1,e==i&&s(a)},h.src=t[n],a[n]=h}})({localDuck:"duck.png",grass:"grass.png"},(t=>{let e=new s(t);e.setScene(new n(e)),e.start()}));
//# sourceMappingURL=index.6c2fe369.js.map
